{"pageProps":{"post":{"title":"Working With Tables in React: Part One","excerpt":"In this two-part series, you will learn about the ins and outs of working with tabular data in React using the React Bootstrap Table component. You'll be...\n","featuredImage":{"url":"https://media.graphcms.com/jjGvZjHYTeSawPQm0YiJ"},"author":{"name":"Esther Vaat","bio":null,"photo":{"url":"https://media.graphcms.com/1U0ueXbkRBiBWSpR79i0"}},"createdAt":"2021-11-27T12:48:42.259456+00:00","slug":"react-tables","content":{"raw":{"children":[{"type":"paragraph","children":[{"text":"One of the most common user interface elements for presenting your data is a table. It turns out that there are many aspects to control when working with tables, such as:"}]},{"type":"bulleted-list","children":[{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"defining columns and headers"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"various cell formats (text, numbers, check boxes)"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"resizing"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"filtering"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"dynamic growing"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"styling"}]}]}]},{"type":"paragraph","children":[{"text":"In this two-part series, you will learn about the ins and outs of working with tabular data in React using the React Bootstrap Table component. You'll be able to create sophisticated and professional-looking tables with little effort and yet be able to customize every aspect."}]},{"type":"heading-two","children":[{"text":"Getting Started  "}]},{"type":"paragraph","children":[{"text":" "}]},{"type":"paragraph","children":[{"text":"To start, you should be familiar with React itself. If you need a primer on React, "},{"href":"https://code.tutsplus.com/series/react-crash-course-for-beginners--cms-1204","type":"link","children":[{"text":"Envato Tuts+ has a great series to help you get started with React"}],"openInNewTab":false},{"text":". In this tutorial, we'll focus on working with "},{"rel":"noopener","href":"https://github.com/react-bootstrap-table/react-bootstrap-table2","type":"link","children":[{"text":"React Bootstrap Table2"}],"className":"editor-rtfLink","openInNewTab":true},{"text":"."}]},{"type":"paragraph","children":[{"text":"To start, create a React app with the "},{"code":true,"text":"create-react-app"},{"text":" command. You can "},{"href":"https://code.tutsplus.com/tutorials/react-crash-course-for-beginners-part-1--cms-29291","type":"link","children":[{"text":"learn how to set "},{"code":true,"text":"create-react-app"},{"text":" up in React Crash Course for Beginners"}],"openInNewTab":false},{"text":"."}]},{"type":"table","children":[{"type":"table_body","children":[{"type":"table_row","children":[{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"1"}]}]},{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"create-react-app react-table-app"}]}]}]}]}]},{"type":"paragraph","children":[{"text":"Now navigate to the project folder and install React Bootstrap Table 2 and Bootstrap."}]},{"type":"table","children":[{"type":"table_body","children":[{"type":"table_row","children":[{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"1"}]},{"type":"paragraph","children":[{"text":"2"}]},{"type":"paragraph","children":[{"text":"3"}]}]},{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"cd react-table-appnpm install react-bootstrap-table-next --savenpm install --save bootstrap@4.0.0"}]}]}]}]}]},{"type":"heading-two","children":[{"text":"Create a Basic Table"}]},{"type":"paragraph","children":[{"text":"We will start with a basic table. We first import the "},{"code":true,"text":"BootstrapTable"},{"text":" component and CSS as shown below."}]},{"type":"table","children":[{"type":"table_body","children":[{"type":"table_row","children":[{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"1"}]},{"type":"paragraph","children":[{"text":"2"}]},{"type":"paragraph","children":[{"text":"3"}]},{"type":"paragraph","children":[{"text":"4"}]},{"type":"paragraph","children":[{"text":"5"}]}]},{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"import logo from './logo.svg';import './App.css';import React, { Component } from 'react';import '../node_modules/bootstrap/dist/css/bootstrap.min.css'; import BootstrapTable from 'react-bootstrap-table-next';"}]}]}]}]}]},{"type":"paragraph","children":[{"text":"First, we initialize the data and column variables, and then we assign the data to the "},{"code":true,"text":"BootstrapTable"},{"text":" component. The data contains the names of some characters from the hilarious show "},{"href":"https://en.wikipedia.org/wiki/Arrested_Development_(TV_series)","type":"link","children":[{"text":"Arrested Development"}],"openInNewTab":false},{"text":". "}]},{"type":"table","children":[{"type":"table_body","children":[{"type":"table_row","children":[{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"01"}]},{"type":"paragraph","children":[{"text":"02"}]},{"type":"paragraph","children":[{"text":"03"}]},{"type":"paragraph","children":[{"text":"04"}]},{"type":"paragraph","children":[{"text":"05"}]},{"type":"paragraph","children":[{"text":"06"}]},{"type":"paragraph","children":[{"text":"07"}]},{"type":"paragraph","children":[{"text":"08"}]},{"type":"paragraph","children":[{"text":"09"}]},{"type":"paragraph","children":[{"text":"10"}]},{"type":"paragraph","children":[{"text":"11"}]},{"type":"paragraph","children":[{"text":"12"}]},{"type":"paragraph","children":[{"text":"13"}]},{"type":"paragraph","children":[{"text":"14"}]},{"type":"paragraph","children":[{"text":"15"}]}]},{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"const data = [  {id: 1, name: 'Gob', value: '2'},  {id: 2, name: 'Buster', value: '5'},  {id: 3, name: 'George Michael', value: '4'}];const columns = [{  dataField: 'id',  text: 'Product ID'}, {  dataField: 'name',  text: 'Product Name'}, {  dataField: 'value',  text: 'Product value'}];"}]}]}]}]}]},{"type":"paragraph","children":[{"text":"The Bootstrap component takes in the following attributes."}]},{"type":"bulleted-list","children":[{"type":"list-item","children":[{"type":"list-item-child","children":[{"code":true,"text":"keyField"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"code":true,"text":"data"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"code":true,"text":"columns"}]}]}]},{"type":"paragraph","children":[{"text":"The "},{"code":true,"text":"render()"},{"text":" method renders a table with three columns: \"ID\", \"Name\", and \"Value\"."}]},{"type":"table","children":[{"type":"table_body","children":[{"type":"table_row","children":[{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"01"}]},{"type":"paragraph","children":[{"text":"02"}]},{"type":"paragraph","children":[{"text":"03"}]},{"type":"paragraph","children":[{"text":"04"}]},{"type":"paragraph","children":[{"text":"05"}]},{"type":"paragraph","children":[{"text":"06"}]},{"type":"paragraph","children":[{"text":"07"}]},{"type":"paragraph","children":[{"text":"08"}]},{"type":"paragraph","children":[{"text":"09"}]},{"type":"paragraph","children":[{"text":"10"}]},{"type":"paragraph","children":[{"text":"11"}]}]},{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"class App extends Component {  render() {    return (      <div className=\"App\">        <p className=\"Table-header\">Basic Table</p>                 <BootstrapTable keyField='id' data={ person } columns={ columns } />      </div>    );  }}"}]}]}]}]}]},{"type":"paragraph","children":[{"text":"To view the table, issue the command "},{"code":true,"text":"npm start--reload"},{"text":". The configuration created by "},{"code":true,"text":"create-react-app"},{"text":" watches over your code and recompiles whenever you change anything, so you only need to run it once. Then, every change will automatically be reflected."}]},{"type":"table","children":[{"type":"table_body","children":[{"type":"table_row","children":[{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"1"}]},{"type":"paragraph","children":[{"text":"2"}]},{"type":"paragraph","children":[{"text":"3"}]},{"type":"paragraph","children":[{"text":"4"}]},{"type":"paragraph","children":[{"text":"5"}]},{"type":"paragraph","children":[{"text":"6"}]},{"type":"paragraph","children":[{"text":"7"}]},{"type":"paragraph","children":[{"text":"8"}]},{"type":"paragraph","children":[{"text":"9"}]}]},{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"Compiled successfully! You can now view my-table-app in the browser.   Local:            https://localhost:3002  On Your Network:  http://192.168.43.206:3002 Note that the development build is not optimized.To create a production build, use npm run build."}]}]}]}]}]},{"type":"paragraph","children":[{"text":"Here is the result:"}]},{"type":"paragraph","children":[{"text":"Note that each column has the same width."}]},{"type":"heading-two","children":[{"text":"Working With Columns"}]},{"type":"paragraph","children":[{"text":"You can control many aspects of the columns. In particular, the column widths can be specified in absolute units, as percentages, or left unspecified. The column width of unspecified columns is the remainder divided equally. For example, for our basic table, let's specify the columns as follows:"}]},{"type":"bulleted-list","children":[{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"first column: 20%"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"second column: 60%"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"third column: 20%"}]}]}]},{"type":"paragraph","children":[{"text":"You can also manage the alignment of text and columns as well as the style of headers and columns. Here is an example of how to specify different column widths, text alignment, and custom styles:"}]},{"type":"table","children":[{"type":"table_body","children":[{"type":"table_row","children":[{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"01"}]},{"type":"paragraph","children":[{"text":"02"}]},{"type":"paragraph","children":[{"text":"03"}]},{"type":"paragraph","children":[{"text":"04"}]},{"type":"paragraph","children":[{"text":"05"}]},{"type":"paragraph","children":[{"text":"06"}]},{"type":"paragraph","children":[{"text":"07"}]},{"type":"paragraph","children":[{"text":"08"}]},{"type":"paragraph","children":[{"text":"09"}]},{"type":"paragraph","children":[{"text":"10"}]},{"type":"paragraph","children":[{"text":"11"}]},{"type":"paragraph","children":[{"text":"12"}]},{"type":"paragraph","children":[{"text":"13"}]},{"type":"paragraph","children":[{"text":"14"}]},{"type":"paragraph","children":[{"text":"15"}]},{"type":"paragraph","children":[{"text":"16"}]},{"type":"paragraph","children":[{"text":"17"}]},{"type":"paragraph","children":[{"text":"18"}]},{"type":"paragraph","children":[{"text":"19"}]},{"type":"paragraph","children":[{"text":"20"}]},{"type":"paragraph","children":[{"text":"21"}]}]},{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"const columns = [{  dataField: 'id',  text: 'Product ID',  headerStyle: (colum, colIndex) => {          return { width: '20%', textAlign: 'center' };        }}, {  dataField: 'name',  text: 'Product Name',  sort: true,  headerStyle: (colum, colIndex) => {          return { width: '60%', textAlign: 'center' };        }}, {  dataField: 'value',  text: 'Product value',  headerStyle: (colum, colIndex) => {          return { width: '20%', textAlign: 'center' };        }   }]; "}]}]}]}]}]},{"type":"paragraph","children":[{"text":"The table now looks like this:"}]},{"type":"heading-three","children":[{"text":"Styling Your Table"}]},{"type":"paragraph","children":[{"text":"You saw how to style individual columns and headers, but styling can go much further. React Bootstrap Table 2 provides a lot of options for customization. First, you can simply add the "},{"code":true,"text":"striped"},{"text":" and "},{"code":true,"text":"hover"},{"text":" attributes to the "},{"code":true,"text":"BootstrapTable"},{"text":" component to get alternate background colors on each row."}]},{"type":"paragraph","children":[{"text":"Let's apply the "},{"code":true,"text":"striped"},{"text":" and "},{"code":true,"text":"hover"},{"text":" properties to our table."}]},{"type":"table","children":[{"type":"table_body","children":[{"type":"table_row","children":[{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"01"}]},{"type":"paragraph","children":[{"text":"02"}]},{"type":"paragraph","children":[{"text":"03"}]},{"type":"paragraph","children":[{"text":"04"}]},{"type":"paragraph","children":[{"text":"05"}]},{"type":"paragraph","children":[{"text":"06"}]},{"type":"paragraph","children":[{"text":"07"}]},{"type":"paragraph","children":[{"text":"08"}]},{"type":"paragraph","children":[{"text":"09"}]},{"type":"paragraph","children":[{"text":"10"}]},{"type":"paragraph","children":[{"text":"11"}]},{"type":"paragraph","children":[{"text":"12"}]},{"type":"paragraph","children":[{"text":"13"}]},{"type":"paragraph","children":[{"text":"14"}]},{"type":"paragraph","children":[{"text":"15"}]},{"type":"paragraph","children":[{"text":"16"}]},{"type":"paragraph","children":[{"text":"17"}]},{"type":"paragraph","children":[{"text":"18"}]}]},{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"class App extends Component {  render() {    return (      <div className=\"App\">        <p className=\"Table-header\">Basic Table</p>                 <BootstrapTable         striped        hover        keyField='id'        keyField='id'        data={ person }        columns={ columns }         />      </div>    );  }}"}]}]}]}]}]},{"type":"paragraph","children":[{"text":"Check out how you would style different columns with different colors."}]},{"type":"table","children":[{"type":"table_body","children":[{"type":"table_row","children":[{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"01"}]},{"type":"paragraph","children":[{"text":"02"}]},{"type":"paragraph","children":[{"text":"03"}]},{"type":"paragraph","children":[{"text":"04"}]},{"type":"paragraph","children":[{"text":"05"}]},{"type":"paragraph","children":[{"text":"06"}]},{"type":"paragraph","children":[{"text":"07"}]},{"type":"paragraph","children":[{"text":"08"}]},{"type":"paragraph","children":[{"text":"09"}]},{"type":"paragraph","children":[{"text":"10"}]},{"type":"paragraph","children":[{"text":"11"}]},{"type":"paragraph","children":[{"text":"12"}]},{"type":"paragraph","children":[{"text":"13"}]}]},{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"const columns = [{  dataField: 'id',  text: 'Product ID',  style: { backgroundColor: #00afb9 }}, {  dataField: 'name',  text: 'Product Name',  style: { backgroundColor: #fdfcdc }}, {  dataField: 'value',  text: 'Product value',  style: { backgroundColor: #fed9b7 }}]; "}]}]}]}]}]},{"type":"paragraph","children":[{"text":""}]},{"type":"paragraph","children":[{"text":"Advertisement"}]},{"type":"paragraph","children":[{"text":""}]},{"type":"heading-two","children":[{"text":"Table Sort"}]},{"type":"paragraph","children":[{"text":"React Bootstrap Table 2 allows sortable columns. This is done by giving an attribute  of "},{"code":true,"text":"sort: true"},{"text":" in the "},{"code":true,"text":"columns"},{"text":" definition."}]},{"type":"table","children":[{"type":"table_body","children":[{"type":"table_row","children":[{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"01"}]},{"type":"paragraph","children":[{"text":"02"}]},{"type":"paragraph","children":[{"text":"03"}]},{"type":"paragraph","children":[{"text":"04"}]},{"type":"paragraph","children":[{"text":"05"}]},{"type":"paragraph","children":[{"text":"06"}]},{"type":"paragraph","children":[{"text":"07"}]},{"type":"paragraph","children":[{"text":"08"}]},{"type":"paragraph","children":[{"text":"09"}]},{"type":"paragraph","children":[{"text":"10"}]},{"type":"paragraph","children":[{"text":"11"}]},{"type":"paragraph","children":[{"text":"12"}]},{"type":"paragraph","children":[{"text":"13"}]},{"type":"paragraph","children":[{"text":"14"}]}]},{"type":"table_cell","children":[{"type":"paragraph","children":[{"text":"const columns = [{  dataField: 'id',  text: 'Product ID',  style: { backgroundColor: #00afb9 }}, {  dataField: 'name',  text: 'Product Name',  style: { backgroundColor: #fdfcdc },  sort: true}, {  dataField: 'value',  text: 'Product value',      style: { backgroundColor: #fed9b7 }}]; "}]}]}]}]}]},{"type":"heading-two","children":[{"text":"Selecting Rows"}]},{"type":"paragraph","children":[{"text":"Once you have your data in a table, you may want to select some rows to perform some operations on them. React Bootstrap Table 2 provides a wide variety of selection options. All the options are organized in a single object you pass to the component as the "},{"code":true,"text":"selectRow"},{"text":" attribute. Here are some of the selection options:"}]},{"type":"bulleted-list","children":[{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"single selection mode (radio button)"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"multi-selection mode (checkbox)"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"configurable column selection width"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"select on row click: by default, you must click the selector (radio button or checkbox)"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"hide selection column (useful if select on row click is true)"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"change background color on selection"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"initial selected rows"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"selection hooks (on single row or when all rows are selected)."}]}]}]},{"type":"paragraph","children":[{"text":"The following components demonstrate many of these options:"}]},{"type":"heading-two","children":[{"text":"Other Libraries for Data Tables in React"}]},{"type":"paragraph","children":[{"text":"Let's explore some other open-source React table libraries."}]},{"type":"paragraph","children":[{"text":""}]},{"type":"paragraph","children":[{"text":"Advertisement"}]},{"type":"paragraph","children":[{"text":""}]},{"type":"heading-three","children":[{"text":""},{"href":"https://bvaughn.github.io/react-virtualized","type":"link","children":[{"text":"react-virtualized"}],"openInNewTab":false},{"text":""}]},{"type":"paragraph","children":[{"text":"react-virtualized is perfect for displaying a large amount of data efficiently when rendering large lists and tabular data."}]},{"type":"paragraph","children":[{"text":"react-virtualized uses a technique called virtual rendering to display extensive data efficiently. Virtual rendering only renders what is visible. For example, if you have a large list that contains a thousand items, react-virtualized will only show a fraction of the data (ones that fit on the screen) at any given moment, until the user scrolls to show more. Other features include:"}]},{"type":"bulleted-list","children":[{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"supports rendering of grids, lists, tables, masonry, and collections"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"ability to auto-resize components"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"ability to display items in reverse order"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"ability to customize CSS classes and styles"}]}]}]},{"type":"heading-three","children":[{"text":""},{"href":"https://github.com/tannerlinsley/react-table","type":"link","children":[{"text":"react-table"}],"openInNewTab":false},{"text":""}]},{"type":"paragraph","children":[{"text":"react-table is a lightweight, open-source library that allows for fast and extendable data grids for React. It also supports hooks. Some of its best features include:"}]},{"type":"bulleted-list","children":[{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"highly customizable "}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"supports sorting, filters, row selection, column ordering, and row expansion"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"fully controllable API"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"animatable and virtualizable"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"resizable"}]}]}]},{"type":"heading-three","children":[{"text":""},{"href":"https://adazzle.github.io/react-data-grid/","type":"link","children":[{"text":"React Data Grid"}],"openInNewTab":false},{"text":""}]},{"type":"paragraph","children":[{"text":"React Data Grid is another open-source library that uses Bootstrap and is perfect for editing tables. It also has a stunning UI. Features include:"}]},{"type":"bulleted-list","children":[{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"column sorting, searching, filtering, and grouping"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"ability to edit columns"}]}]},{"type":"list-item","children":[{"type":"list-item-child","children":[{"text":"expand columns to show more data"}]}]}]},{"type":"heading-two","children":[{"text":"Conclusion"}]},{"type":"paragraph","children":[{"text":"In this tutorial, we created a simple React application using create-react-app, added react-bootstrap-table2, populated a table with data, worked with columns, styled the table, and selected rows. "}]},{"type":"paragraph","children":[{"text":"In the next part, we'll "},{"href":"https://code.tutsplus.com/tutorials/working-with-tables-in-react-part-two--cms-29683","type":"link","children":[{"text":"continue the journey by expanding rows, adding rows, deleting rows, and covering pagination, cell editing, and advanced customization"}],"openInNewTab":false},{"text":". Stay tuned.\n"}]},{"type":"paragraph","children":[{"text":""}]}]}},"categories":[{"name":"React","slug":"react"}]}},"__N_SSG":true}